datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    type           UserType
    firstName      String
    lastName       String
    password       String
    birthdate      DateTime
    profilePicture String?
    phoneNumber    String
    biography      String?
    caregiver      Caregiver?
    careseeker     Careseeker?
    location       Location?
}

model Location {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    placeId   String
    longitude Float
    latitude  Float
    address   String
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Careseeker {
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    userId       String                  @id
    appointments Appointment[]
    User         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    children     Child[]
    favorites    FavoritesOnCaregivers[]
    Review       Review[]

    @@index([userId])
}

model Child {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    age          Int
    careseekerId String
    name         String
    careseeker   Careseeker @relation(fields: [careseekerId], references: [userId], onDelete: Cascade)

    @@index([careseekerId])
}

model Caregiver {
    createdAt                DateTime                @default(now())
    updatedAt                DateTime                @updatedAt
    userId                   String                  @id
    backgroundCheckCompleted Boolean                 @default(false)
    appointments             Appointment[]
    User                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    favoritedBy              FavoritesOnCaregivers[]
    reviews                  Review[]
    services                 Service[]

    @@index([userId])
}

model Review {
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    id           String     @id @default(cuid())
    rating       Int
    caregiverId  String
    careseekerId String
    Caregiver    Caregiver  @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker @relation(fields: [careseekerId], references: [userId])

    @@index([caregiverId])
    @@index([careseekerId])
}

model FavoritesOnCaregivers {
    careseekerId String
    caregiverId  String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    Caregiver    Caregiver  @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker @relation(fields: [careseekerId], references: [userId])

    @@id([careseekerId, caregiverId])
    @@index([caregiverId])
    @@index([careseekerId])
}

model Appointment {
    id           String            @id @default(cuid())
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    startTime    DateTime
    endTime      DateTime
    careseekerId String
    caregiverId  String
    serviceId    String
    status       AppointmentStatus @default(pending)
    Caregiver    Caregiver         @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker        @relation(fields: [careseekerId], references: [userId])
    service      Service           @relation(fields: [serviceId], references: [id])

    @@index([caregiverId])
    @@index([careseekerId])
    @@index([serviceId])
}

model Contact {
    id          String   @id @default(cuid())
    email       String
    firstName   String
    lastName    String
    phoneNumber String?
    message     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Waitlist {
    id        String   @id @default(cuid())
    email     String   @unique
    contacted Boolean? @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id           String          @id @default(cuid())
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    title        String
    description  String
    price        Decimal
    caregiverId  String
    category     ServiceCategory
    duration     Int
    appointments Appointment[]
    Caregiver    Caregiver       @relation(fields: [caregiverId], references: [userId], onDelete: Cascade)

    @@index([caregiverId])
}

model ForgotPasswordToken {
    id         String @id @default(cuid())
    userId     Int
    expiresInt BigInt
    token      String
}

enum UserType {
    careseeker
    caregiver
}

enum ServiceCategory {
    child_care
    senior_care
    housekeeping
    pet_care
}

enum AppointmentStatus {
    cancelled
    pending
    confirmed
    finished
}
