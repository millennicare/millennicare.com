datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             Int         @id @default(autoincrement())
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
    type           UserType
    firstName      String
    middle         String?
    lastName       String
    email          String      @unique
    password       String
    birthdate      DateTime
    profilePicture String
    phoneNumber    String
    biography      String?
    caregiver      Caregiver?
    careseeker     Careseeker?
    location       Location?
}

model Location {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    placeId   String
    longitude Float
    latitude  Float
    address   String
    userId    Int      @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Careseeker {
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    userId       Int                     @id
    appointments Appointment[]
    User         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    children     Child[]
    favorites    FavoritesOnCaregivers[]
    Review       Review[]

    @@index([userId])
}

model Child {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    age                 Int
    specialInstructions String?
    careseekerId        Int
    name                String
    careseeker          Careseeker @relation(fields: [careseekerId], references: [userId], onDelete: Cascade)

    @@index([careseekerId])
}

model Caregiver {
    createdAt                DateTime                @default(now())
    updatedAt                DateTime                @updatedAt
    userId                   Int                     @id
    backgroundCheckCompleted Boolean                 @default(false)
    appointments             Appointment[]
    User                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    favoritedBy              FavoritesOnCaregivers[]
    reviews                  Review[]
    services                 Service[]

    @@index([userId])
}

model Review {
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    id           Int        @id @default(autoincrement())
    score        Int
    caregiverId  Int
    careseekerId Int
    Caregiver    Caregiver  @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker @relation(fields: [careseekerId], references: [userId])

    @@index([caregiverId])
    @@index([careseekerId])
}

model FavoritesOnCaregivers {
    careseekerId Int
    caregiverId  Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    Caregiver    Caregiver  @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker @relation(fields: [careseekerId], references: [userId])

    @@id([careseekerId, caregiverId])
    @@index([caregiverId])
    @@index([careseekerId])
}

model Appointment {
    id           Int               @id @default(autoincrement())
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    startTime    DateTime
    endTime      DateTime
    careseekerId Int
    caregiverId  Int
    serviceId    Int
    status       AppointmentStatus @default(pending)
    Caregiver    Caregiver         @relation(fields: [caregiverId], references: [userId])
    Careseeker   Careseeker        @relation(fields: [careseekerId], references: [userId])
    service      Service           @relation(fields: [serviceId], references: [id])

    @@index([caregiverId])
    @@index([careseekerId])
    @@index([serviceId])
}

model Contact {
    id          Int      @id @default(autoincrement())
    email       String
    firstName   String
    lastName    String
    phoneNumber String?
    message     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Waitlist {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    contacted Boolean? @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id           Int             @id @default(autoincrement())
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    title        String
    description  String
    price        Decimal
    caregiverId  Int
    category     ServiceCategory
    duration     Int
    appointments Appointment[]
    Caregiver    Caregiver       @relation(fields: [caregiverId], references: [userId], onDelete: Cascade)

    @@index([caregiverId])
}

model ForgotPasswordToken {
    id         Int    @id @default(autoincrement())
    userId     Int
    expiresInt BigInt
    token      String
}

enum UserType {
    careseeker
    caregiver
}

enum ServiceCategory {
    child_care
    senior_care
    housekeeping
    pet_care
}

enum AppointmentStatus {
    cancelled
    pending
    confirmed
    finished
}
